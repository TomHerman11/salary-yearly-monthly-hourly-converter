{"version":3,"sources":["main/Converter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Converter","useState","yearlySalary","setYearlySalary","workdaysAYear","setWorkdaysAYear","workHoursADay","setWorkHoursADay","className","type","value","onChange","event","parseInt","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTA+DeA,MA5Df,WACE,IADmB,EAGqBC,mBAAS,MAH9B,mBAGZC,EAHY,KAGEC,EAHF,OAIuBF,mBAAS,KAJhC,mBAIZG,EAJY,KAIGC,EAJH,OAKuBJ,mBAAS,GALhC,mBAKZK,EALY,KAKGC,EALH,KAgCnB,OACE,sBAAKC,UAAU,YAAf,UACE,gDACA,uBAAOC,KAAK,SAASC,MAAOR,EAAcS,SA3BlB,SAACC,GAC3BT,EAAgBU,SAASD,EAAME,OAAOJ,WA4BpC,iDACA,uBAAOD,KAAK,SAASC,MAAOR,EArCV,GAqCwCS,SA1BjC,SAACC,GAC5BT,EAZoB,GAYJU,SAASD,EAAME,OAAOJ,WA2BpC,sDAAuBN,EAAvB,uBACA,uBAAOK,KAAK,SAASC,MAAOR,EAAeE,EAAeO,SAzBnC,SAACC,GAC1BT,EAAgBU,SAASD,EAAME,OAAOJ,OAASN,MA0B7C,uDAAwBE,EAAxB,mBACA,uBAAOG,KAAK,SACVC,MAAOR,GAAgBE,EAAgBE,GACvCK,SA1BsB,SAACC,GAC3BT,EAAgBU,SAASD,EAAME,OAAOJ,OAASN,EAAgBE,MA4B7D,gDACA,kDACA,uBAAOG,KAAK,SAASC,MAAON,EAAeO,SA3BlB,SAACC,GAC5BP,EAAiBQ,SAASD,EAAME,OAAOJ,WA4BrC,mDACA,uBAAOD,KAAK,SAASC,MAAOJ,EAAeK,SA1BlB,SAACC,GAC5BL,EAAiBM,SAASD,EAAME,OAAOJ,eCnB5BK,MATf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,QCMSQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5f9a5b15.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Converter.css';\n\nfunction Converter() {\n  const MONTHS_A_YEAR = 12\n\n  const [yearlySalary, setYearlySalary] = useState(120_000)\n  const [workdaysAYear, setWorkdaysAYear] = useState(260)\n  const [workHoursADay, setWorkHoursADay] = useState(8)\n\n\n  const yearlySalaryChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYearlySalary(parseInt(event.target.value));\n  }\n\n  const monthlySalaryChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYearlySalary(parseInt(event.target.value) * MONTHS_A_YEAR);\n  }\n\n  const dailySalaryChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYearlySalary(parseInt(event.target.value) * workdaysAYear);\n  }\n\n  const hourlySalaryChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYearlySalary(parseInt(event.target.value) * workdaysAYear * workHoursADay);\n  }\n\n  const workdaysAYearChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setWorkdaysAYear(parseInt(event.target.value));\n  }\n\n  const workHoursADayChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setWorkHoursADay(parseInt(event.target.value));\n  }\n\n  return (\n    <div className=\"Converter\">\n      <h4>{`Yearly Salary:`}</h4>\n      <input type=\"number\" value={yearlySalary} onChange={yearlySalaryChanged} />\n\n      <h4>{`Monthly Salary:`}</h4>\n      <input type=\"number\" value={yearlySalary / MONTHS_A_YEAR} onChange={monthlySalaryChanged} />\n\n      <h4>{`Daily Salary: (${workdaysAYear} workdays a year)`}</h4>\n      <input type=\"number\" value={yearlySalary / workdaysAYear} onChange={dailySalaryChanged} />\n\n      <h4>{`Hourly Salary: (${workHoursADay} hours a day)`}</h4>\n      <input type=\"number\"\n        value={yearlySalary / (workdaysAYear * workHoursADay)}\n        onChange={hourlySalaryChanged}\n      />\n\n      <h2>Configurations</h2>\n      <h4>{`Workdays a year:`}</h4>\n      <input type=\"number\" value={workdaysAYear} onChange={workdaysAYearChanged} />\n\n      <h4>{`Work hours a day:`}</h4>\n      <input type=\"number\" value={workHoursADay} onChange={workHoursADayChanged} />\n\n    </div>\n  );\n}\n\nexport default Converter;\n","import React from 'react';\nimport './App.css';\nimport Converter from './main/Converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Salary Converter</h1>\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}